generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  passwordHash       String?        @map("password_hash")
  avatarUrl          String?        @map("avatar_url")
  birthday           DateTime?
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  name               String
  barkKey            String?        @map("bark_key")
  IpAddress          IpAddress[]
  accounts           Account[]
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]
  tokens             Token[]

  @@map("users")
}

model Token {
  id          String    @id @default(uuid())
  type        TokenType
  createdAt   DateTime  @default(now()) @map("created_at")
  userId      String    @map("user_id")
  key         String?   @map("bark_key")
  deviceKey   String?   @map("device_key")
  deviceToken String?   @map("device_token")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")
  userId            String          @map("user_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, userId])
  @@map("accounts")
}

model Invite {
  id             String       @id @default(uuid())
  email          String
  role           Role
  createdAt      DateTime     @default(now()) @map("created_at")
  authorId       String?      @map("author_id")
  organizationId String       @map("organization_id")
  author         User?        @relation(fields: [authorId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Organization {
  id                        String        @id @default(uuid())
  name                      String
  slug                      String        @unique
  domain                    String?       @unique
  shouldAttachUsersByDomain Boolean       @default(false)
  ownerId                   String
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")
  Invoice                   Invoice[]
  ipAddress                 IpAddress[]
  addons                    Addon[]
  Invite                    Invite[]
  members                   Member[]
  owner                     User          @relation(fields: [ownerId], references: [id])
  QueryLog                  QueryLog[]
  subscription              Subscription?

  @@index([slug])
  @@map("organizations")
}

model IpAddress {
  id             String       @id @default(uuid())
  organizationId String
  ip             String
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  authorId       String?      @map("author_id")
  author         User?        @relation(fields: [authorId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
}

model Member {
  id             String       @id @default(uuid())
  role           Role         @default(MEMBER)
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("members")
}

model Subscription {
  id               String             @id @default(uuid())
  organizationId   String             @unique
  planId           String
  status           SubscriptionStatus
  currentPeriodEnd DateTime
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  startedAt        DateTime           @default(now())
  Invoice          Invoice[]
  organization     Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan             Plan               @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

model Invoice {
  id             String        @id @default(uuid())
  organizationId String
  subscriptionId String?
  amount         Int
  status         InvoiceStatus
  dueDate        DateTime
  paidAt         DateTime?
  createdAt      DateTime      @default(now()) @map("created_at")
  paymentUrl     String?       @map("payment_url")
  paymentId      String?
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model Plan {
  id               String         @id @default(uuid())
  name             String
  price            Int
  description      String?
  maxOrganizations Int
  maxIps           Int
  maxRequests      Int
  ipChangeLimit    Int
  supportLevel     String
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  type             PlanTier       @unique
  isTrialAvailable Boolean        @default(false)
  subscriptions    Subscription[]

  @@map("plans")
}

model QueryLog {
  id             String       @id @default(uuid())
  organizationId String
  ipAddress      String?      @map("ip_address")
  createdAt      DateTime     @default(now()) @map("created_at")
  queryType      String
  status         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@map("query_logs")
}

model MonitoringEvent {
  id         String   @id @default(uuid())
  name       String
  status     Int
  url        String?
  message    String?
  detectedAt DateTime @default(now())
  notified   Boolean  @default(false)

  @@index([name, status, detectedAt])
  @@map("monitoring_events")
}

model Addon {
  id             String       @id @default(uuid())
  organizationId String
  type           AddonType
  amount         Int
  price          Int
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("addons")
}

enum TokenType {
  PASSWORD_RECOVER
  BARK_CONNECT
}

enum AccountProvider {
  GITHUB
  GOOGLE
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  CUSTOMER
  BILLING
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  CANCELED
}

enum PlanTier {
  BASIC
  PROFESSIONAL
  BUSINESS
  TRIAL
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELED
}

enum AddonType {
  EXTRA_IP
  EXTRA_REQUESTS
  EARLY_IP_CHANGE
}
