generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  passwordHash String?   @map("password_hash")
  avatarUrl    String?   @map("avatar_url")
  birthday     DateTime?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tokens             Token[]
  accounts           Account[]
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
  GOOGLE
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  CUSTOMER
  BILLING
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Organization {
  id                        String  @id @default(uuid())
  name                      String
  slug                      String  @unique
  domain                    String? @unique
  shouldAttachUsersByDomain Boolean @default(false)

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  members      Member[]
  subscription Subscription? // ğŸ”¥ A organizaÃ§Ã£o tem uma assinatura ativa
  ipAddress    IpAddress?
  addons       Addon[] // ğŸ”¥ Recursos extras comprados pela organizaÃ§Ã£o

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Invite    Invite[]

  @@index([slug])
  @@map("organizations")
}

model IpAddress {
  id             String @id @default(uuid())
  organizationId String @unique
  ip             String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  CANCELED
}

enum PlanTier {
  BASIC // Plano bÃ¡sico
  PROFESSIONAL // Plano profissional
  BUSINESS // Plano Business
  TRIAL // Trial (7 dias grÃ¡tis, apenas para Basic)
  BETA // UsuÃ¡rios beta testers
}

model Subscription {
  id               String             @id @default(uuid())
  organizationId   String             @unique
  planId           String // ğŸ”¥ Define o plano da assinatura
  status           SubscriptionStatus
  startedAt        DateTime           @default(now()) // ğŸ”¥ Data de inÃ­cio da assinatura
  currentPeriodEnd DateTime // ğŸ”¥ Data de vencimento da assinatura

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan         Plan         @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

model Plan {
  id               String   @id @default(uuid())
  name             String
  price            Int // Em centavos (ex: R$ 10,00 => 1000)
  description      String?
  type             PlanTier // ğŸ”¥ Enum que define o tipo da assinatura
  isTrialAvailable Boolean  @default(false) // ğŸ”¥ Define se o plano tem trial

  maxOrganizations Int // Quantidade mÃ¡xima de organizaÃ§Ãµes no plano
  maxIps           Int // ğŸ”¥ Limite de IPs para esse plano
  maxRequests      Int // ğŸ”¥ Limite de requisiÃ§Ãµes por mÃªs
  ipChangeLimit    Int // ğŸ”¥ Tempo mÃ­nimo para troca de IP (em horas)
  supportLevel     String // ğŸ”¥ Suporte disponÃ­vel nesse plano (E-mail, WhatsApp, PrioritÃ¡rio)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  subscriptions Subscription[]

  @@map("plans")
}

model Addon {
  id             String    @id @default(uuid())
  organizationId String
  type           AddonType
  amount         Int // ğŸ”¥ Quantidade de requisiÃ§Ãµes ou IPs comprados
  price          Int // ğŸ”¥ PreÃ§o do addon em centavos

  createdAt DateTime @default(now()) @map("created_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("addons")
}

enum AddonType {
  EXTRA_IP
  EXTRA_REQUESTS
  EARLY_IP_CHANGE
}
