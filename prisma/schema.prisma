generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  passwordHash String?   @map("password_hash")
  avatarUrl    String?   @map("avatar_url")
  birthday     DateTime?
  barkKey      String?   @map("bark_key")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tokens             Token[]
  accounts           Account[]
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]
  IpAddress          IpAddress[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
  BARK_CONNECT
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  // ðŸ”¥ Dados especÃ­ficos para integraÃ§Ã£o com o Bark
  deviceToken String? @map("device_token")
  deviceKey   String? @map("device_key")
  key         String? @map("bark_key") // pode ser um identificador da sessÃ£o/aplicaÃ§Ã£o

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
  GOOGLE
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  CUSTOMER
  BILLING
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Organization {
  id                        String  @id @default(uuid())
  name                      String
  slug                      String  @unique
  domain                    String? @unique
  shouldAttachUsersByDomain Boolean @default(false)

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  members      Member[]
  subscription Subscription? // ðŸ”¥ A organizaÃ§Ã£o tem uma assinatura ativa
  ipAddress    IpAddress[]
  addons       Addon[] // ðŸ”¥ Recursos extras comprados pela organizaÃ§Ã£o
  Invite       Invite[]
  QueryLog     QueryLog[]
  Invoice      Invoice[]

  @@index([slug])
  @@map("organizations")
}

model IpAddress {
  id             String @id @default(uuid())
  ip             String
  organizationId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  CANCELED
}

enum PlanTier {
  BASIC // Plano bÃ¡sico
  PROFESSIONAL // Plano profissional
  BUSINESS // Plano Business
  TRIAL // Trial (7 dias grÃ¡tis, apenas para Basic)
}

model Subscription {
  id               String             @id @default(uuid())
  organizationId   String             @unique
  planId           String // ðŸ”¥ Define o plano da assinatura
  status           SubscriptionStatus
  startedAt        DateTime           @default(now()) // ðŸ”¥ Data de inÃ­cio da assinatura
  currentPeriodEnd DateTime // ðŸ”¥ Data de vencimento da assinatura

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan         Plan         @relation(fields: [planId], references: [id])
  Invoice      Invoice[]

  @@map("subscriptions")
}

model Invoice {
  id             String        @id @default(uuid())
  organizationId String
  subscriptionId String? // Tornando opcional
  amount         Int // Valor total da fatura em centavos
  status         InvoiceStatus
  dueDate        DateTime // Data de vencimento
  paidAt         DateTime? // Data de pagamento, se foi pago
  paymentUrl     String?       @map("payment_url")
  paymentId      String?

  createdAt DateTime @default(now()) @map("created_at")

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELED
}

model Plan {
  id               String   @id @default(uuid())
  name             String
  price            Int // Em centavos (ex: R$ 10,00 => 1000)
  description      String?
  type             PlanTier @unique
  isTrialAvailable Boolean  @default(false) // ðŸ”¥ Define se o plano tem trial

  maxOrganizations Int // Quantidade mÃ¡xima de organizaÃ§Ãµes no plano
  maxIps           Int // ðŸ”¥ Limite de IPs para esse plano
  maxRequests      Int // ðŸ”¥ Limite de requisiÃ§Ãµes por mÃªs
  ipChangeLimit    Int // ðŸ”¥ Tempo mÃ­nimo para troca de IP (em horas)
  supportLevel     String // ðŸ”¥ Suporte disponÃ­vel nesse plano (E-mail, WhatsApp, PrioritÃ¡rio)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  subscriptions Subscription[]

  @@map("plans")
}

model QueryLog {
  id             String   @id @default(uuid())
  organizationId String   @map("ip_address")
  ipAddress      String
  status         String // âœ… MantÃ©m o status da consulta (sucesso/falha)
  queryType      String // âœ… Novo campo para armazenar o tipo de consulta (CPF, CNPJ, etc.)
  createdAt      DateTime @default(now()) @map("created_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@map("query_logs")
}

model MonitoringEvent {
  id         String   @id @default(uuid())
  name       String
  status     Int
  url        String?
  message    String?
  detectedAt DateTime @default(now())
  notified   Boolean  @default(false)

  @@index([name, status, detectedAt])
  @@map("monitoring_events")
}

model Addon {
  id             String    @id @default(uuid())
  organizationId String
  type           AddonType
  amount         Int
  price          Int

  createdAt DateTime @default(now()) @map("created_at")

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("addons")
}

enum AddonType {
  EXTRA_IP
  EXTRA_REQUESTS
  EARLY_IP_CHANGE
}
